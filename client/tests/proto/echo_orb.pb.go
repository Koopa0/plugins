// Code generated by protoc-gen-go-orb-http. DO NOT EDIT.
//
// version:
// - protoc-gen-go-orb-http  v1.0.0
// - protoc                 v4.25.1
//
// Proto source: echo.proto

package proto

import (
	"context"

	"google.golang.org/grpc"

	"github.com/go-orb/go-orb/server"

	mdrpc "github.com/go-orb/plugins/server/drpc"
	mhertz "github.com/go-orb/plugins/server/hertz"
	mhttp "github.com/go-orb/plugins/server/http"
)

type orbStreamsHandler interface {
	Call(context.Context, *CallRequest) (*CallResponse, error)
	mustEmbedUnimplementedStreamsServer()
}

func registerStreamsHTTPHandler(srv *mhttp.ServerHTTP, handler orbStreamsHandler) {
	r := srv.Router()
	r.Post("/echo.Streams/Call", mhttp.NewGRPCHandler(srv, handler.Call))
}

func registerStreamsHertzHandler(srv *mhertz.Server, handler orbStreamsHandler) {
	r := srv.Router()
	r.POST("/echo.Streams/Call", mhertz.NewGRPCHandler(srv, handler.Call))
}

func registerStreamsDRPCHandler(srv *mdrpc.Server, handler orbStreamsHandler) {
	desc := DRPCStreamsDescription{}

	// Register with DRPC.
	r := srv.Router()
	r.Register(handler, desc)

	// Add each endpoint name of this handler to the orb drpc server.
	for i := 0; i < desc.NumMethods(); i++ {
		name, _, _, _, _ := desc.Method(i)
		srv.AddEndpoint(name)
	}
}

// RegisterStreamsHandler will return a registration function that can be
// provided to entrypoints as a handler registration.
func RegisterStreamsHandler(handler any) server.RegistrationFunc {
	return server.RegistrationFunc(func(s any) {
		switch srv := any(s).(type) {
		case *mhttp.ServerHTTP:
			registerStreamsHTTPHandler(srv, handler.(orbStreamsHandler))
		case *mhertz.Server:
			registerStreamsHertzHandler(srv, handler.(orbStreamsHandler))
		case *mdrpc.Server:
			registerStreamsDRPCHandler(srv, handler.(orbStreamsHandler))
		case grpc.ServiceRegistrar:
			RegisterStreamsServer(srv, handler.(StreamsServer))
		default:
			// Maybe we should log here with slog global logger
		}
	})
}
