// Code generated by protoc-gen-go-orb. DO NOT EDIT.
//
// version:
// - protoc-gen-go-orb        v0.0.1
// - protoc                   v5.29.2
//
// source: file/file.proto

package file

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_file_file_proto struct{}

func (drpcEncoding_File_file_file_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_file_file_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_file_file_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_file_file_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_file_file_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCFileServiceServer interface {
	UploadFile(DRPCFileService_UploadFileStream) error
	AuthorizedUploadFile(DRPCFileService_AuthorizedUploadFileStream) error
}

type DRPCFileServiceUnimplementedServer struct{}

func (s *DRPCFileServiceUnimplementedServer) UploadFile(DRPCFileService_UploadFileStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCFileServiceUnimplementedServer) AuthorizedUploadFile(DRPCFileService_AuthorizedUploadFileStream) error {
	return drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCFileServiceDescription struct{}

func (DRPCFileServiceDescription) NumMethods() int { return 2 }

func (DRPCFileServiceDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/file.FileService/UploadFile", drpcEncoding_File_file_file_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCFileServiceServer).
					UploadFile(
						&drpcFileService_UploadFileStream{in1.(drpc.Stream)},
					)
			}, DRPCFileServiceServer.UploadFile, true
	case 1:
		return "/file.FileService/AuthorizedUploadFile", drpcEncoding_File_file_file_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return nil, srv.(DRPCFileServiceServer).
					AuthorizedUploadFile(
						&drpcFileService_AuthorizedUploadFileStream{in1.(drpc.Stream)},
					)
			}, DRPCFileServiceServer.AuthorizedUploadFile, true
	default:
		return "", nil, nil, nil, false
	}
}

type DRPCFileService_UploadFileStream interface {
	drpc.Stream
	SendAndClose(*UploadResponse) error
	Recv() (*FileChunk, error)
}

type drpcFileService_UploadFileStream struct {
	drpc.Stream
}

func (x *drpcFileService_UploadFileStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcFileService_UploadFileStream) SendAndClose(m *UploadResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_file_file_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

func (x *drpcFileService_UploadFileStream) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.MsgRecv(m, drpcEncoding_File_file_file_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcFileService_UploadFileStream) RecvMsg(m *FileChunk) error {
	return x.MsgRecv(m, drpcEncoding_File_file_file_proto{})
}

type DRPCFileService_AuthorizedUploadFileStream interface {
	drpc.Stream
	SendAndClose(*UploadResponse) error
	Recv() (*FileChunk, error)
}

type drpcFileService_AuthorizedUploadFileStream struct {
	drpc.Stream
}

func (x *drpcFileService_AuthorizedUploadFileStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcFileService_AuthorizedUploadFileStream) SendAndClose(m *UploadResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_file_file_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

func (x *drpcFileService_AuthorizedUploadFileStream) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.MsgRecv(m, drpcEncoding_File_file_file_proto{}); err != nil {
		return nil, err
	}
	return m, nil
}

func (x *drpcFileService_AuthorizedUploadFileStream) RecvMsg(m *FileChunk) error {
	return x.MsgRecv(m, drpcEncoding_File_file_file_proto{})
}
