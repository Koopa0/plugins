// Code generated by protoc-gen-go-orb-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-orb  v0.0.1
// - protoc             v5.29.2
// source: file/file.proto

package file

import (
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileService_UploadFile_FullMethodName           = "/file.FileService/UploadFile"
	FileService_AuthorizedUploadFile_FullMethodName = "/file.FileService/AuthorizedUploadFile"
)

// FileServiceServer is the server API for FileService service.
// All implementations should embed UnimplementedFileServiceServer
// for forward compatibility.
type FileServiceServer interface {
	// Client streaming RPC for file upload
	UploadFile(grpc.ClientStreamingServer[FileChunk, UploadResponse]) error
	AuthorizedUploadFile(grpc.ClientStreamingServer[FileChunk, UploadResponse]) error
}

// UnimplementedFileServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServiceServer struct{}

func (UnimplementedFileServiceServer) UploadFile(grpc.ClientStreamingServer[FileChunk, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileServiceServer) AuthorizedUploadFile(grpc.ClientStreamingServer[FileChunk, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AuthorizedUploadFile not implemented")
}
func (UnimplementedFileServiceServer) testEmbeddedByValue() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func registerFileServiceGRPCHandler(s grpc.ServiceRegistrar, srv FileServiceServer) {
	// If the following call panics, it indicates UnimplementedFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).UploadFile(&grpc.GenericServerStream[FileChunk, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_UploadFileServer = grpc.ClientStreamingServer[FileChunk, UploadResponse]

func _FileService_AuthorizedUploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).AuthorizedUploadFile(&grpc.GenericServerStream[FileChunk, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileService_AuthorizedUploadFileServer = grpc.ClientStreamingServer[FileChunk, UploadResponse]

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FileService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AuthorizedUploadFile",
			Handler:       _FileService_AuthorizedUploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file/file.proto",
}
