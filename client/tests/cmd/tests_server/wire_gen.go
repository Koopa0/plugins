// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/go-orb/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-orb/go-orb/log"
	"github.com/go-orb/go-orb/registry"
	"github.com/go-orb/go-orb/server"
	"github.com/go-orb/go-orb/types"
	"github.com/go-orb/plugins/client/tests/handler"
	"github.com/go-orb/plugins/client/tests/proto"
	"github.com/go-orb/plugins/config/source/cli/urfave"
)

import (
	_ "github.com/go-orb/plugins-experimental/registry/mdns"
	_ "github.com/go-orb/plugins/codecs/json"
	_ "github.com/go-orb/plugins/codecs/proto"
	_ "github.com/go-orb/plugins/codecs/yaml"
	_ "github.com/go-orb/plugins/config/source/file"
	_ "github.com/go-orb/plugins/log/slog"
	_ "github.com/go-orb/plugins/server/drpc"
	_ "github.com/go-orb/plugins/server/grpc"
	_ "github.com/go-orb/plugins/server/http"
	_ "github.com/go-orb/plugins/server/http/router/chi"
)

// Injectors from wire.go:

// newComponents combines everything above and returns a slice of components.
func newComponents(serviceName types.ServiceName, serviceVersion types.ServiceVersion) ([]types.Component, error) {
	configData, err := urfave.ProvideConfigData(serviceName, serviceVersion)
	if err != nil {
		return nil, err
	}
	v, err := types.ProvideComponents()
	if err != nil {
		return nil, err
	}
	v2 := _wireValue
	logger, err := log.Provide(serviceName, configData, v, v2...)
	if err != nil {
		return nil, err
	}
	v3 := _wireValue2
	registryType, err := registry.Provide(serviceName, serviceVersion, configData, v, logger, v3...)
	if err != nil {
		return nil, err
	}
	v4, err := provideServerOpts()
	if err != nil {
		return nil, err
	}
	serverServer, err := server.Provide(serviceName, configData, v, logger, registryType, v4...)
	if err != nil {
		return nil, err
	}
	v5, err := provideComponents(serviceName, serviceVersion, configData, logger, registryType, serverServer)
	if err != nil {
		return nil, err
	}
	return v5, nil
}

var (
	_wireValue  = []log.Option{}
	_wireValue2 = []registry.Option{}
)

// wire.go:

// provideServerOpts provides options for the go-orb server.
func provideServerOpts() ([]server.ConfigOption, error) {

	hInstance := new(handler.EchoHandler)
	hRegister := proto.RegisterStreamsHandler(hInstance)
	server.Handlers.
		Add(proto.HandlerStreams, hRegister)

	opts := []server.ConfigOption{}

	return opts, nil
}

// provideComponents creates a slice of components out of the arguments.
func provideComponents(
	serviceName types.ServiceName,
	serviceVersion types.ServiceVersion,
	cfgData types.ConfigData,
	logger log.Logger,
	reg registry.Type,
	srv server.Server,
) ([]types.Component, error) {
	components := []types.Component{}
	components = append(components, logger)
	components = append(components, reg)
	components = append(components, &srv)

	return components, nil
}
