//notlint:nosnakecase,lll
package main

import (
	"fmt"
	"net/http"
	"os"
	"regexp"
	"strings"

	"google.golang.org/protobuf/reflect/protoreflect"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

var methodSets = make(map[string]int) //nolint:gochecknoglobals

// generateFile generates a _http.micro.pb.go file containing kratos errors definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File, omitempty bool) *protogen.GeneratedFile {
	if len(file.Services) == 0 || (omitempty && !hasHTTPRule(file.Services)) {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + "_http.micro.pb.go"

	g := gen.NewGeneratedFile(filename, file.GoImportPath)

	// Generate header message.
	g.P("// Code generated by protoc-gen-go-micro-http. DO NOT EDIT.")
	g.P("//")
	g.P("// version:")
	g.P(fmt.Sprintf("// - protoc-gen-go-micro-http %s", release))
	g.P("// - protoc                   ", protocVersion(gen))
	g.P("//")

	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// Proto source: ", file.Desc.Path())
	}

	// Generate package name.
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	// Generate service code.
	if len(file.Services) > 0 {
		g.P(protoFile{genServices(file, g, omitempty)}.Render())
	}

	return g
}

// genServices generates a list of service definitions from a proto file.
func genServices(file *protogen.File, generated *protogen.GeneratedFile, omitempty bool) []serviceDesc {
	var services []serviceDesc

	for _, service := range file.Services {
		if service := genService(file, generated, service, omitempty); len(service.Methods) > 0 {
			services = append(services, service)
		}
	}

	return services
}

// genService will generate a single service description.
func genService(file *protogen.File, generated *protogen.GeneratedFile, service *protogen.Service, omitempty bool) serviceDesc {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		generated.P("//")
		generated.P(deprecationComment)
	}

	// HTTP Server.
	serviceDescription := serviceDesc{
		Type:     service.GoName,
		Name:     string(service.Desc.FullName()),
		Metadata: file.Desc.Path(),
		Methods:  make([]methodDesc, 0, 1),
	}

	for _, method := range service.Methods {
		// gRPC streaming is not suppoerted at the moment
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}

		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if rule != nil && ok {
			for _, bind := range rule.GetAdditionalBindings() {
				serviceDescription.AddMethod(buildHTTPRule(generated, method, bind))
			}

			serviceDescription.AddMethod(buildHTTPRule(generated, method, rule))
		} else if !omitempty {
			serviceDescription.AddMethod(
				buildMethodDesc(generated, method, http.MethodPost,
					fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())))
		}
	}

	return serviceDescription
}

func hasHTTPRule(services []*protogen.Service) bool {
	for _, service := range services {
		for _, method := range service.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}

			rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
			if rule != nil && ok {
				return true
			}
		}
	}

	return false
}

func buildHTTPRule(generated *protogen.GeneratedFile, protogenMethod *protogen.Method, rule *annotations.HttpRule) methodDesc {
	body := rule.GetBody()
	responseBody := rule.GetResponseBody()
	path, method := parsePattern(rule.GetPattern())

	methodDescription := buildMethodDesc(generated, protogenMethod, method, path)

	if (method == http.MethodGet || method == http.MethodDelete) && body != "" {
		errMessage("%s %s body should not be declared.", method, path)
	} else if method != http.MethodGet && method != http.MethodDelete && body == "" {
		errMessage("%s %s does not declare a body.", method, path)
	}

	switch {
	case body == "*":
		methodDescription.HasBody = true
		methodDescription.Body = ""
	case body != "":
		methodDescription.HasBody = true
		methodDescription.Body = "." + camelCaseVars(body)
	default:
		methodDescription.HasBody = false
	}

	if responseBody == "*" {
		methodDescription.ResponseBody = ""
	} else if responseBody != "" {
		methodDescription.ResponseBody = "." + camelCaseVars(responseBody)
	}

	return methodDescription
}

func parsePattern(pattern any) (string, string) {
	path, method := "", ""

	switch pattern := pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = http.MethodGet
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = http.MethodPut
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = http.MethodPost
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = http.MethodDelete
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = http.MethodPatch
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.GetPath()
		method = pattern.Custom.GetKind()
	}

	return path, method
}

func buildMethodDesc(generated *protogen.GeneratedFile, protogenMethod *protogen.Method, method, path string) methodDesc {
	defer func() { methodSets[protogenMethod.GoName]++ }()

	vars := buildPathVars(path)

	for v, s := range vars {
		fields := protogenMethod.Input.Desc.Fields()

		if s != nil {
			path = replacePath(v, *s, path)
		}

		for _, field := range strings.Split(v, ".") {
			if strings.TrimSpace(field) == "" {
				continue
			}

			if strings.Contains(field, ":") {
				field = strings.Split(field, ":")[0]
			}

			fd := fields.ByName(protoreflect.Name(field))
			if fd == nil {
				errMessage("The corresponding field '%s' declaration in message could not be found in '%s'", v, path)
				os.Exit(2) //nolint:gocritic
			}

			switch {
			case fd.IsMap():
				errMessage("The field in path:'%s' shouldn't be a map", v)
			case fd.IsList():
				errMessage("The field in path:'%s' shouldn't be a list.", v)
			case fd.Kind() == protoreflect.MessageKind || fd.Kind() == protoreflect.GroupKind:
				fields = fd.Message().Fields()
			}
		}
	}

	return methodDesc{
		Name:         protogenMethod.GoName,
		OriginalName: string(protogenMethod.Desc.Name()),
		Num:          methodSets[protogenMethod.GoName],
		Request:      generated.QualifiedGoIdent(protogenMethod.Input.GoIdent),
		Reply:        generated.QualifiedGoIdent(protogenMethod.Output.GoIdent),
		Path:         path,
		Method:       fMethod(method),
		HasVars:      len(vars) > 0,
	}
}

func buildPathVars(path string) (res map[string]*string) {
	if strings.HasSuffix(path, "/") {
		errMessage("Path %s should not end with \"/\"", path)
	}

	pattern := regexp.MustCompile(`(?i){([a-z.0-9_\s]*)=?([^{}]*)}`)
	matches := pattern.FindAllStringSubmatch(path, -1)
	res = make(map[string]*string, len(matches))

	for _, m := range matches {
		name := strings.TrimSpace(m[1])
		if len(name) > 1 && len(m[2]) > 0 {
			res[name] = &m[2]
		} else {
			res[name] = nil
		}
	}

	return
}

func replacePath(name string, value string, path string) string {
	pattern := regexp.MustCompile(fmt.Sprintf(`(?i){([\s]*%s[\s]*)=?([^{}]*)}`, name))

	idx := pattern.FindStringIndex(path)
	if len(idx) > 0 {
		path = fmt.Sprintf("%s{%s:%s}%s",
			path[:idx[0]], // The start of the match
			name,
			strings.ReplaceAll(value, "*", ".*"),
			path[idx[1]:],
		)
	}

	return path
}

func camelCaseVars(s string) string {
	subs := strings.Split(s, ".")
	vars := make([]string, 0, len(subs))

	for _, sub := range subs {
		vars = append(vars, camelCase(sub))
	}

	return strings.Join(vars, ".")
}

// camelCase returns the CamelCased name.
// If there is an interior underscore followed by a lower case letter,
// drop the underscore and convert the letter to upper case.
// There is a remote possibility of this rewrite causing a name collision,
// but it's so remote we're prepared to pretend it's nonexistent - since the
// C++ generator lowercase names, it's extremely unlikely to have two fields
// with different capitalization.
// In short, _my_field_name_2 becomes XMyFieldName_2.
func camelCase(input string) string {
	if input == "" {
		return ""
	}

	output := make([]byte, 0, 32)
	i := 0

	if input[0] == '_' {
		// Need a capital letter; drop the '_'.
		output = append(output, 'X')
		i++
	}

	// Invariant: if the next letter is lower case, it must be converted
	// to upper case.
	// That is, we process a word at a time, where words are marked by _ or
	// upper case letter. Digits are treated as words.
	for ; i < len(input); i++ {
		c := input[i]
		if c == '_' && i+1 < len(input) && isASCIILower(input[i+1]) {
			continue // Skip the underscore in s.
		}

		if isASCIIDigit(c) {
			output = append(output, c)
			continue
		}

		// Assume we have a letter now - if not, it's a bogus identifier.
		// The next word is a sequence of characters that must start upper case.
		if isASCIILower(c) {
			c ^= ' ' // Make it a capital letter.
		}

		output = append(output, c) // Guaranteed not lower case.

		// Accept lower case sequence that follows.
		for i+1 < len(input) && isASCIILower(input[i+1]) {
			i++
			output = append(output, input[i])
		}
	}

	return string(output)
}

// Is c an ASCII lower-case letter?
func isASCIILower(c byte) bool {
	return 'a' <= c && c <= 'z'
}

// Is c an ASCII digit?
func isASCIIDigit(c byte) bool {
	return '0' <= c && c <= '9'
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}

	var suffix string

	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}

	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func fMethod(s string) string {
	if len(s) < 2 {
		return s
	}

	l := strings.ToLower(s)

	return strings.ToUpper(string(l[0])) + l[1:]
}

func errMessage(msg string, args ...any) {
	f := fmt.Sprintf("\u001B[31mWARN\u001B[m: %s\n", msg)
	fmt.Fprintf(os.Stderr, f, args...)
}

const deprecationComment = "// Deprecated: Do not use."
