// Code generated by protoc-gen-go-orb. DO NOT EDIT.
//
// version:
// - protoc-gen-go-orb        v0.0.1
// - protoc                   v5.29.2
//
// Proto source: echo.proto

package proto

import (
	"context"

	"github.com/go-orb/go-orb/client"
	"github.com/go-orb/go-orb/log"
	"github.com/go-orb/go-orb/server"

	mhttp "github.com/go-orb/plugins/server/http"
)

// HandlerStreams is the name of a service, it's here to static type/reference.
const HandlerStreams = "echo.Streams"
const EndpointStreamsCall = "/echo.Streams/Call"

// StreamsClient is the client for echo.Streams
type StreamsClient struct {
	client client.Client
}

// NewStreamsClient creates a new client for echo.Streams
func NewStreamsClient(client client.Client) *StreamsClient {
	return &StreamsClient{client: client}
}

// Call requests Call.
func (c *StreamsClient) Call(ctx context.Context, service string, req *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	return client.Request[CallResponse](ctx, c.client, service, EndpointStreamsCall, req, opts...)
}

// StreamsHandler is the Handler for echo.Streams
type StreamsHandler interface {
	Call(ctx context.Context, req *CallRequest) (*CallResponse, error)
}

// registerStreamsHTTPHandler registers the service to an HTTP server.
func registerStreamsHTTPHandler(srv *mhttp.Server, handler StreamsHandler) {
	r := srv.Router()
	r.Post("/echo.Streams/Call", mhttp.NewGRPCHandler(srv, handler.Call, HandlerStreams, "Call"))
}

// RegisterStreamsHandler will return a registration function that can be
// provided to entrypoints as a handler registration.
func RegisterStreamsHandler(handler StreamsHandler) server.RegistrationFunc {
	return func(s any) {
		switch srv := s.(type) {

		case *mhttp.Server:
			registerStreamsHTTPHandler(srv, handler)
		default:
			log.Warn("No provider for this server found", "proto", "echo.proto", "handler", "Streams", "server", s)
		}
	}
}
