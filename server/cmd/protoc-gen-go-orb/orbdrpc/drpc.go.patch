--- drpc.go.upstream	2024-08-12 19:02:01.737448650 +0200
+++ drpc.go	2024-08-12 22:01:14.687030408 +0200
@@ -1,59 +1,62 @@
 // Copyright (C) 2019 Storj Labs, Inc.
 // See LICENSE for copying information.
 
-// protoc-gen-go-drpc generates DRPC code for protobuf services.
-package main
+// Package orbdrpc generates DRPC code for protobuf services.
+//
+//nolint:lll,funlen,wsl,dupword
+package orbdrpc
 
 import (
-	"flag"
 	"fmt"
-	"runtime/debug"
 	"strconv"
 	"strings"
 
 	"google.golang.org/protobuf/compiler/protogen"
-	"google.golang.org/protobuf/types/pluginpb"
 )
 
-type config struct {
-	protolib string
-	json     bool
-}
-
-func main() {
-	var flags flag.FlagSet
-	var conf config
-	flags.StringVar(&conf.protolib, "protolib", "google.golang.org/protobuf", "which protobuf library to use for encoding")
-	flags.BoolVar(&conf.json, "json", true, "generate encoders with json support")
-
-	protogen.Options{
-		ParamFunc: flags.Set,
-	}.Run(func(plugin *protogen.Plugin) error {
-		for _, f := range plugin.Files {
-			if !f.Generate || len(f.Services) == 0 {
-				continue
-			}
-			generateFile(plugin, f, conf)
-		}
-		plugin.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
-		return nil
-	})
+// Version will be set by orb/main.
+var Version string //nolint:gochecknoglobals
+
+// Config will be set by orb/main.
+type Config struct {
+	Protolib string
+	Json     bool
 }
 
-func generateFile(plugin *protogen.Plugin, file *protogen.File, conf config) {
-	gf := plugin.NewGeneratedFile(file.GeneratedFilenamePrefix+"_drpc.pb.go", file.GoImportPath)
-	d := &drpc{gf, file}
+func protocVersion(gen *protogen.Plugin) string {
+	v := gen.Request.GetCompilerVersion()
+	if v == nil {
+		return "(unknown)"
+	}
 
-	d.P("// Code generated by protoc-gen-go-drpc. DO NOT EDIT.")
-	if bi, ok := debug.ReadBuildInfo(); ok {
-		d.P("// protoc-gen-go-drpc version: ", bi.Main.Version)
+	var suffix string
+
+	if s := v.GetSuffix(); s != "" {
+		suffix = "-" + s
 	}
+
+	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
+}
+
+// GenerateFile writes the file.
+func GenerateFile(plugin *protogen.Plugin, file *protogen.File, conf Config) {
+	gf := plugin.NewGeneratedFile(file.GeneratedFilenamePrefix+"_orb-drpc.pb.go", file.GoImportPath)
+	d := &drpc{gf, file}
+
+	// Generate header message.
+	d.P("// Code generated by protoc-gen-go-orb. DO NOT EDIT.")
+	d.P("//")
+	d.P("// version:")
+	d.P("// - protoc-gen-go-orb        v" + Version)
+	d.P("// - protoc                   ", protocVersion(plugin))
+	d.P("//")
 	d.P("// source: ", file.Desc.Path())
 	d.P()
 	d.P("package ", file.GoPackageName)
 	d.P()
 
 	d.generateEncoding(conf)
+
 	for _, service := range file.Services {
 		d.generateService(service)
 	}
@@ -88,14 +91,6 @@
 	return d.QualifiedGoIdent(method.Output.GoIdent)
 }
 
-func (d *drpc) ClientIface(service *protogen.Service) string {
-	return "DRPC" + service.GoName + "Client"
-}
-
-func (d *drpc) ClientImpl(service *protogen.Service) string {
-	return "drpc" + service.GoName + "Client"
-}
-
 func (d *drpc) ServerIface(service *protogen.Service) string {
 	return "DRPC" + service.GoName + "Server"
 }
@@ -144,11 +139,11 @@
 // encoding generation
 //
 
-func (d *drpc) generateEncoding(conf config) {
+func (d *drpc) generateEncoding(conf Config) {
 	d.P("type ", d.EncodingName(), " struct{}")
 	d.P()
 
-	switch conf.protolib {
+	switch conf.Protolib {
 	case "google.golang.org/protobuf":
 		d.P("func (", d.EncodingName(), ") Marshal(msg ", d.Ident("storj.io/drpc", "Message"), ") ([]byte, error) {")
 		d.P("return ", d.Ident("google.golang.org/protobuf/proto", "Marshal"), "(msg.(", d.Ident("google.golang.org/protobuf/proto", "Message"), "))")
@@ -165,7 +160,7 @@
 		d.P("}")
 		d.P()
 
-		if conf.json {
+		if conf.Json {
 			d.P("func (", d.EncodingName(), ") JSONMarshal(msg ", d.Ident("storj.io/drpc", "Message"), ") ([]byte, error) {")
 			d.P("return ", d.Ident("google.golang.org/protobuf/encoding/protojson", "Marshal"), "(msg.(", d.Ident("google.golang.org/protobuf/proto", "Message"), "))")
 			d.P("}")
@@ -188,7 +183,7 @@
 		d.P("}")
 		d.P()
 
-		if conf.json {
+		if conf.Json {
 			d.P("func (", d.EncodingName(), ") JSONMarshal(msg ", d.Ident("storj.io/drpc", "Message"), ") ([]byte, error) {")
 			d.P("var buf ", d.Ident("bytes", "Buffer"))
 			d.P("err := new(", d.Ident("github.com/gogo/protobuf/jsonpb", "Marshaler"), ").Marshal(&buf, msg.(", d.Ident("github.com/gogo/protobuf/proto", "Message"), "))")
@@ -207,27 +202,26 @@
 
 	default:
 		d.P("func (", d.EncodingName(), ") Marshal(msg ", d.Ident("storj.io/drpc", "Message"), ") ([]byte, error) {")
-		d.P("return ", d.Ident(conf.protolib, "Marshal"), "(msg)")
+		d.P("return ", d.Ident(conf.Protolib, "Marshal"), "(msg)")
 		d.P("}")
 		d.P()
 
 		d.P("func (", d.EncodingName(), ") Unmarshal(buf []byte, msg ", d.Ident("storj.io/drpc", "Message"), ") error {")
-		d.P("return ", d.Ident(conf.protolib, "Unmarshal"), "(buf, msg)")
+		d.P("return ", d.Ident(conf.Protolib, "Unmarshal"), "(buf, msg)")
 		d.P("}")
 		d.P()
 
-		if conf.json {
+		if conf.Json {
 			d.P("func (", d.EncodingName(), ") JSONMarshal(msg ", d.Ident("storj.io/drpc", "Message"), ") ([]byte, error) {")
-			d.P("return ", d.Ident(conf.protolib, "JSONMarshal"), "(msg)")
+			d.P("return ", d.Ident(conf.Protolib, "JSONMarshal"), "(msg)")
 			d.P("}")
 			d.P()
 
 			d.P("func (", d.EncodingName(), ") JSONUnmarshal(buf []byte, msg ", d.Ident("storj.io/drpc", "Message"), ") error {")
-			d.P("return ", d.Ident(conf.protolib, "JSONUnmarshal"), "(buf, msg)")
+			d.P("return ", d.Ident(conf.Protolib, "JSONUnmarshal"), "(buf, msg)")
 			d.P("}")
 			d.P()
 		}
-
 	}
 }
 
@@ -236,35 +230,6 @@
 //
 
 func (d *drpc) generateService(service *protogen.Service) {
-	// Client interface
-	d.P("type ", d.ClientIface(service), " interface {")
-	d.P("DRPCConn() ", d.Ident("storj.io/drpc", "Conn"))
-	d.P()
-	for _, method := range service.Methods {
-		d.P(d.generateClientSignature(method))
-	}
-	d.P("}")
-	d.P()
-
-	// Client implementation
-	d.P("type ", d.ClientImpl(service), " struct {")
-	d.P("cc ", d.Ident("storj.io/drpc", "Conn"))
-	d.P("}")
-	d.P()
-
-	// Client constructor
-	d.P("func New", d.ClientIface(service), "(cc ", d.Ident("storj.io/drpc", "Conn"), ") ", d.ClientIface(service), " {")
-	d.P("return &", d.ClientImpl(service), "{cc}")
-	d.P("}")
-	d.P()
-
-	// Client method implementations
-	d.P("func (c *", d.ClientImpl(service), ") DRPCConn() ", d.Ident("storj.io/drpc", "Conn"), "{ return c.cc }")
-	d.P()
-	for _, method := range service.Methods {
-		d.generateClientMethod(method)
-	}
-
 	// Server interface
 	d.P("type ", d.ServerIface(service), " interface {")
 	for _, method := range service.Methods {
@@ -311,114 +276,6 @@
 	}
 }
 
-//
-// client methods
-//
-
-func (d *drpc) generateClientSignature(method *protogen.Method) string {
-	reqArg := ", in *" + d.InputType(method)
-	if method.Desc.IsStreamingClient() {
-		reqArg = ""
-	}
-	respName := "*" + d.OutputType(method)
-	if method.Desc.IsStreamingServer() || method.Desc.IsStreamingClient() {
-		respName = d.ClientStreamIface(method)
-	}
-	return fmt.Sprintf("%s(ctx %s%s) (%s, error)", method.GoName, d.Ident("context", "Context"), reqArg, respName)
-}
-
-func (d *drpc) generateClientMethod(method *protogen.Method) {
-	recvType := d.ClientImpl(method.Parent)
-	outType := d.OutputType(method)
-	inType := d.InputType(method)
-
-	d.P("func (c *", recvType, ") ", d.generateClientSignature(method), "{")
-	if !method.Desc.IsStreamingServer() && !method.Desc.IsStreamingClient() {
-		d.P("out := new(", outType, ")")
-		d.P("err := c.cc.Invoke(ctx, ", d.RPCGoString(method), ", ", d.EncodingName(), "{}, in, out)")
-		d.P("if err != nil { return nil, err }")
-		d.P("return out, nil")
-		d.P("}")
-		d.P()
-		return
-	}
-
-	d.P("stream, err := c.cc.NewStream(ctx, ", d.RPCGoString(method), ", ", d.EncodingName(), "{})")
-	d.P("if err != nil { return nil, err }")
-	d.P("x := &", d.ClientStreamImpl(method), "{stream}")
-	if !method.Desc.IsStreamingClient() {
-		d.P("if err := x.MsgSend(in, ", d.EncodingName(), "{}); err != nil { return nil, err }")
-		d.P("if err := x.CloseSend(); err != nil { return nil, err }")
-	}
-	d.P("return x, nil")
-	d.P("}")
-	d.P()
-
-	genSend := method.Desc.IsStreamingClient()
-	genRecv := method.Desc.IsStreamingServer()
-	genCloseAndRecv := !method.Desc.IsStreamingServer()
-
-	// Stream auxiliary types and methods.
-	d.P("type ", d.ClientStreamIface(method), " interface {")
-	d.P(d.Ident("storj.io/drpc", "Stream"))
-	if genSend {
-		d.P("Send(*", inType, ") error")
-	}
-	if genRecv {
-		d.P("Recv() (*", outType, ", error)")
-	}
-	if genCloseAndRecv {
-		d.P("CloseAndRecv() (*", outType, ", error)")
-	}
-	d.P("}")
-	d.P()
-
-	d.P("type ", d.ClientStreamImpl(method), " struct {")
-	d.P(d.Ident("storj.io/drpc", "Stream"))
-	d.P("}")
-	d.P()
-
-	d.P("func (x *", d.ClientStreamImpl(method), ") GetStream() drpc.Stream {")
-	d.P("return x.Stream")
-	d.P("}")
-	d.P()
-
-	if genSend {
-		d.P("func (x *", d.ClientStreamImpl(method), ") Send(m *", inType, ") error {")
-		d.P("return x.MsgSend(m, ", d.EncodingName(), "{})")
-		d.P("}")
-		d.P()
-	}
-	if genRecv {
-		d.P("func (x *", d.ClientStreamImpl(method), ") Recv() (*", outType, ", error) {")
-		d.P("m := new(", outType, ")")
-		d.P("if err := x.MsgRecv(m, ", d.EncodingName(), "{}); err != nil { return nil, err }")
-		d.P("return m, nil")
-		d.P("}")
-		d.P()
-
-		d.P("func (x *", d.ClientStreamImpl(method), ") RecvMsg(m *", outType, ") error {")
-		d.P("return x.MsgRecv(m, ", d.EncodingName(), "{})")
-		d.P("}")
-		d.P()
-	}
-	if genCloseAndRecv {
-		d.P("func (x *", d.ClientStreamImpl(method), ") CloseAndRecv() (*", outType, ", error) {")
-		d.P("if err := x.CloseSend(); err != nil { return nil, err }")
-		d.P("m := new(", outType, ")")
-		d.P("if err := x.MsgRecv(m, ", d.EncodingName(), "{}); err != nil { return nil, err }")
-		d.P("return m, nil")
-		d.P("}")
-		d.P()
-
-		d.P("func (x *", d.ClientStreamImpl(method), ") CloseAndRecvMsg(m *", outType, ") error {")
-		d.P("if err := x.CloseSend(); err != nil { return err }")
-		d.P("return x.MsgRecv(m, ", d.EncodingName(), "{})")
-		d.P("}")
-		d.P()
-	}
-}
-
 //
 // server methods
 //
