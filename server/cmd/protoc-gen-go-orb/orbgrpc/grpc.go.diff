--- grpc.go	2024-08-12 16:39:17.924741238 +0200
+++ orb_grpc/grpc.go	2024-08-12 16:38:19.277375665 +0200
@@ -16,7 +16,7 @@
  *
  */
 
-package main
+package orb_grpc
 
 import (
 	"fmt"
@@ -28,6 +28,10 @@
 	"google.golang.org/protobuf/types/descriptorpb"
 )
 
+var Version = "" // set by protoc-gen-go-orb
+var RequireUnimplemented *bool // set by protoc-gen-go-orb
+var UseGenericStreams *bool // set by protoc-gen-go-orb
+
 const (
 	contextPackage = protogen.GoImportPath("context")
 	grpcPackage    = protogen.GoImportPath("google.golang.org/grpc")
@@ -80,7 +84,7 @@
 func (serviceGenerateHelper) generateUnimplementedServerType(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
 	serverType := service.GoName + "Server"
 	mustOrShould := "must"
-	if !*requireUnimplemented {
+	if !*RequireUnimplemented {
 		mustOrShould = "should"
 	}
 	// Server Unimplemented struct for forward compatibility.
@@ -100,7 +104,7 @@
 		g.P("return ", nilArg, statusPackage.Ident("Errorf"), "(", codesPackage.Ident("Unimplemented"), `, "method `, method.GoName, ` not implemented")`)
 		g.P("}")
 	}
-	if *requireUnimplemented {
+	if *RequireUnimplemented {
 		g.P("func (Unimplemented", serverType, ") mustEmbedUnimplemented", serverType, "() {}")
 	}
 	g.P("func (Unimplemented", serverType, ") testEmbeddedByValue() {}")
@@ -131,18 +135,18 @@
 // FileDescriptorProto.syntax field number
 const fileDescriptorProtoSyntaxFieldNumber = 12
 
-// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
-func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
+// GenerateFile generates a _orb-grpc.pb.go file containing gRPC service definitions.
+func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
 	if len(file.Services) == 0 {
 		return nil
 	}
-	filename := file.GeneratedFilenamePrefix + "_grpc.pb.go"
+	filename := file.GeneratedFilenamePrefix + "_orb-grpc.pb.go"
 	g := gen.NewGeneratedFile(filename, file.GoImportPath)
 	// Attach all comments associated with the syntax field.
 	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
-	g.P("// Code generated by protoc-gen-go-grpc. DO NOT EDIT.")
+	g.P("// Code generated by protoc-gen-go-orb-grpc. DO NOT EDIT.")
 	g.P("// versions:")
-	g.P("// - protoc-gen-go-grpc v", version)
+	g.P("// - protoc-gen-go-orb v", Version)
 	g.P("// - protoc             ", protocVersion(gen))
 	if file.Proto.GetOptions().GetDeprecated() {
 		g.P("// ", file.Desc.Path(), " is a deprecated file.")
@@ -178,7 +182,7 @@
 
 	g.P("// This is a compile-time assertion to ensure that this generated file")
 	g.P("// is compatible with the grpc package it is being compiled against.")
-	if *useGenericStreams {
+	if *UseGenericStreams {
 		g.P("// Requires gRPC-Go v1.64.0 or later.")
 		g.P("const _ = ", grpcPackage.Ident("SupportPackageIsVersion9"))
 	} else {
@@ -260,7 +264,7 @@
 	}
 
 	mustOrShould := "must"
-	if !*requireUnimplemented {
+	if !*RequireUnimplemented {
 		mustOrShould = "should"
 	}
 
@@ -287,7 +291,7 @@
 		g.P(method.Comments.Leading,
 			serverSignature(g, method))
 	}
-	if *requireUnimplemented {
+	if *RequireUnimplemented {
 		g.P("mustEmbedUnimplemented", serverType, "()")
 	}
 	g.P("}")
@@ -333,7 +337,7 @@
 	if !method.Desc.IsStreamingClient() && !method.Desc.IsStreamingServer() {
 		s += "*" + g.QualifiedGoIdent(method.Output.GoIdent)
 	} else {
-		if *useGenericStreams {
+		if *UseGenericStreams {
 			s += clientStreamInterface(g, method)
 		} else {
 			s += method.Parent.GoName + "_" + method.GoName + "Client"
@@ -374,7 +378,7 @@
 	}
 
 	streamImpl := unexport(service.GoName) + method.GoName + "Client"
-	if *useGenericStreams {
+	if *UseGenericStreams {
 		typeParam := g.QualifiedGoIdent(method.Input.GoIdent) + ", " + g.QualifiedGoIdent(method.Output.GoIdent)
 		streamImpl = g.QualifiedGoIdent(grpcPackage.Ident("GenericClientStream")) + "[" + typeParam + "]"
 	}
@@ -392,7 +396,7 @@
 	g.P()
 
 	// Auxiliary types aliases, for backwards compatibility.
-	if *useGenericStreams {
+	if *UseGenericStreams {
 		g.P("// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.")
 		g.P("type ", service.GoName, "_", method.GoName, "Client = ", clientStreamInterface(g, method))
 		g.P()
@@ -460,7 +464,7 @@
 		reqArgs = append(reqArgs, "*"+g.QualifiedGoIdent(method.Input.GoIdent))
 	}
 	if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
-		if *useGenericStreams {
+		if *UseGenericStreams {
 			reqArgs = append(reqArgs, serverStreamInterface(g, method))
 		} else {
 			reqArgs = append(reqArgs, method.Parent.GoName+"_"+method.GoName+"Server")
@@ -545,7 +549,7 @@
 	}
 
 	streamImpl := unexport(service.GoName) + method.GoName + "Server"
-	if *useGenericStreams {
+	if *UseGenericStreams {
 		typeParam := g.QualifiedGoIdent(method.Input.GoIdent) + ", " + g.QualifiedGoIdent(method.Output.GoIdent)
 		streamImpl = g.QualifiedGoIdent(grpcPackage.Ident("GenericServerStream")) + "[" + typeParam + "]"
 	}
@@ -562,7 +566,7 @@
 	g.P()
 
 	// Auxiliary types aliases, for backwards compatibility.
-	if *useGenericStreams {
+	if *UseGenericStreams {
 		g.P("// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.")
 		g.P("type ", service.GoName, "_", method.GoName, "Server = ", serverStreamInterface(g, method))
 		g.P()
