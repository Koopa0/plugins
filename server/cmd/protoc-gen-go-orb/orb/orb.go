// Package orb is the protoc generator for orb.
//
//notlint:nosnakecase,lll
package orb

import (
	"fmt"
	"net/http"
	"os"
	"regexp"
	"slices"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
)

// Version will be set by protoc-gen-go-orb.
//
//nolint:gochecknoglobals
var Version string

// Servers as well.
//
//nolint:gochecknoglobals
var Servers []string

var methodSets = make(map[string]int) //nolint:gochecknoglobals

// GenerateFile generates a _orb-http.pb.go file containing orb specs.
func GenerateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_orb.pb.go"

	gFile := gen.NewGeneratedFile(filename, file.GoImportPath)

	// Generate header message.
	gFile.P("// Code generated by protoc-gen-go-orb. DO NOT EDIT.")
	gFile.P("//")
	gFile.P("// version:")
	gFile.P("// - protoc-gen-go-orb        v" + Version)
	gFile.P("// - protoc                   ", protocVersion(gen))
	gFile.P("//")

	if file.Proto.GetOptions().GetDeprecated() {
		gFile.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		gFile.P("// Proto source: ", file.Desc.Path())
	}

	// Generate package name.
	gFile.P()
	gFile.P("package ", file.GoPackageName)
	gFile.P()

	// Generate service code.
	if len(file.Services) > 0 {
		mainTemplate := protoFile{
			ServerGRPC:  slices.Contains(Servers, "grpc"),
			ServerDRPC:  slices.Contains(Servers, "drpc"),
			ServerHTTP:  slices.Contains(Servers, "http"),
			ServerHertz: slices.Contains(Servers, "hertz"),
			Services:    genServices(file, gFile),
		}.Render()

		gFile.P(mainTemplate)
	}

	return gFile
}

// genServices generates a list of service definitions from a proto file.
func genServices(file *protogen.File, generated *protogen.GeneratedFile) []serviceDesc {
	services := make([]serviceDesc, len(file.Services))

	for i, service := range file.Services {
		services[i] = genService(file, generated, service)
	}

	return services
}

// genService will generate a single service description.
func genService(file *protogen.File, generated *protogen.GeneratedFile, service *protogen.Service) serviceDesc {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() { //nolint:errcheck
		generated.P("//")
		generated.P(deprecationComment)
	}

	// HTTP Server.
	serviceDescription := serviceDesc{
		Type:      service.GoName,
		TypeLower: strings.ToLower(service.GoName),
		Name:      string(service.Desc.FullName()),
		Metadata:  file.Desc.Path(),
		Methods:   make([]methodDesc, 0, 1),
	}

	for _, method := range service.Methods {
		serviceDescription.AddMethod(
			buildMethodDesc(generated, method, http.MethodPost,
				fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())))
	}

	return serviceDescription
}

func buildMethodDesc(generated *protogen.GeneratedFile, protogenMethod *protogen.Method, method, path string) methodDesc {
	defer func() { methodSets[protogenMethod.GoName]++ }()

	vars := buildPathVars(path)

	for v, s := range vars {
		fields := protogenMethod.Input.Desc.Fields()

		if s != nil {
			path = replacePath(v, *s, path)
		}

		for _, field := range strings.Split(v, ".") {
			if strings.TrimSpace(field) == "" {
				continue
			}

			if strings.Contains(field, ":") {
				field = strings.Split(field, ":")[0]
			}

			fd := fields.ByName(protoreflect.Name(field))
			if fd == nil {
				errMessage("The corresponding field '%s' declaration in message could not be found in '%s'", v, path)
				os.Exit(2) //nolint:gocritic
			}

			switch {
			case fd.IsMap():
				errMessage("The field in path:'%s' shouldn't be a map", v)
			case fd.IsList():
				errMessage("The field in path:'%s' shouldn't be a list.", v)
			case fd.Kind() == protoreflect.MessageKind || fd.Kind() == protoreflect.GroupKind:
				fields = fd.Message().Fields()
			}
		}
	}

	return methodDesc{
		Name:            protogenMethod.GoName,
		OriginalName:    string(protogenMethod.Desc.Name()),
		Num:             methodSets[protogenMethod.GoName],
		Request:         generated.QualifiedGoIdent(protogenMethod.Input.GoIdent),
		Reply:           generated.QualifiedGoIdent(protogenMethod.Output.GoIdent),
		Path:            path,
		Method:          fMethod(method),
		MethodUpper:     method,
		ClientStreaming: protogenMethod.Desc.IsStreamingClient(),
		ServerStreaming: protogenMethod.Desc.IsStreamingServer(),
	}
}

func buildPathVars(path string) (res map[string]*string) {
	if strings.HasSuffix(path, "/") {
		errMessage("Path %s should not end with \"/\"", path)
	}

	pattern := regexp.MustCompile(`(?i){([a-z.0-9_\s]*)=?([^{}]*)}`)
	matches := pattern.FindAllStringSubmatch(path, -1)
	res = make(map[string]*string, len(matches))

	for _, m := range matches {
		name := strings.TrimSpace(m[1])
		if len(name) > 1 && len(m[2]) > 0 {
			res[name] = &m[2]
		} else {
			res[name] = nil
		}
	}

	return
}

func replacePath(name string, value string, path string) string {
	pattern := regexp.MustCompile(fmt.Sprintf(`(?i){([\s]*%s[\s]*)=?([^{}]*)}`, name))

	idx := pattern.FindStringIndex(path)
	if len(idx) > 0 {
		path = fmt.Sprintf("%s{%s:%s}%s",
			path[:idx[0]], // The start of the match
			name,
			strings.ReplaceAll(value, "*", ".*"),
			path[idx[1]:],
		)
	}

	return path
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}

	var suffix string

	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}

	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func fMethod(s string) string {
	if len(s) < 2 {
		return s
	}

	l := strings.ToLower(s)

	return strings.ToUpper(string(l[0])) + l[1:]
}

func errMessage(msg string, args ...any) {
	f := fmt.Sprintf("\u001B[31mWARN\u001B[m: %s\n", msg)
	fmt.Fprintf(os.Stderr, f, args...)
}

const deprecationComment = "// Deprecated: Do not use."
